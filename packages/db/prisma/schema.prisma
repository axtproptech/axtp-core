// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum VerificationLevel {
  NotVerified
  Pending
  Level1
  Level2
  // add more if needed
}

model Customer {
  id                   Int                    @id @default(autoincrement())
  cuid                 String                 @unique @default(cuid())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  firstName            String
  lastName             String
  dateOfBirth          DateTime
  placeOfBirth         String
  nationality          String?
  profession           String
  cpfCnpj              String                 @unique
  phone1               String
  phone2               String?
  email1               String
  email2               String?
  isActive             Boolean                @default(true)
  isBlocked            Boolean                @default(false)
  termsOfUse           TermsOfUse[]
  documents            Document[]
  addresses            Address[]
  blockchainAccounts   BlockchainAccount[]
  verificationLevel    VerificationLevel      @default(NotVerified)
  verificationResult   VerificationResult?
  TermsOfUseOnCustomer TermsOfUseOnCustomer[]

  @@index([cuid, lastName, email1, cpfCnpj])
}

model TermsOfUseOnCustomer {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  customer     Customer   @relation(fields: [customerId], references: [id])
  customerId   Int
  termsOfUse   TermsOfUse @relation(fields: [termsOfUseId], references: [id])
  termsOfUseId Int
  accepted     Boolean    @default(false)
}

model TermsOfUse {
  id                   Int                    @id @default(autoincrement()) // this also reflects the version
  createdAt            DateTime               @default(now())
  url                  String
  Customer             Customer?              @relation(fields: [customerId], references: [id])
  customerId           Int?
  TermsOfUseOnCustomer TermsOfUseOnCustomer[]
}

model BlockchainAccount {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  publicKey  String   @unique
  accountId  String   @unique
  rsAddress  String   @unique

  @@index([publicKey, accountId, rsAddress])
}

enum AddressType {
  Residential
  Work
  Billing
}

model Address {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  Int
  type        AddressType
  line1       String
  line2       String
  line3       String
  line4       String
  city        String
  postCodeZip String
  state       String
  country     String
  isDefault   Boolean     @default(true)
  isActive    Boolean     @default(true)
}

enum DocumentType {
  Selfie
  Id
  DriverLicense
  Passport
  ProofOfAddress
  Other
}

model Document {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  customer   Customer     @relation(fields: [customerId], references: [id])
  customerId Int
  type       DocumentType
  url        String
}

model VerificationResult {
  id                   Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  customer             Customer @relation(fields: [customerId], references: [id])
  customerId           Int      @unique
  updatedAt            DateTime @updatedAt
  validPII             Boolean  @default(false) // all passed documents match (or not)
  isPoliticallyExposed Boolean  @default(false)
  isLegallyRestricted  Boolean  @default(false)
  hasPendingProcesses  Boolean  @default(false)
  credibilityScore     Int?
  anualIncomeBRL       Int?
  hasDebts             Boolean  @default(false)
  isEligible           Boolean  @default(false) // final verdict. Is true then he is verified.
  observations         String?  @db.Text
}
