// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum VerificationLevel {
  NotVerified
  Pending
  Level1
  Level2
  // add more if needed
}

model Customer {
  id                 Int                    @id @default(autoincrement())
  cuid               String                 @unique @default(cuid())
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  firstName          String
  lastName           String
  firstNameMother    String                 @default("")
  lastNameMother     String                 @default("")
  dateOfBirth        DateTime?
  placeOfBirth       String?
  nationality        String?
  profession         String?
  cpfCnpj            String                 @unique
  phone1             String
  phone2             String?
  email1             String
  email2             String?
  isActive           Boolean                @default(true)
  isBlocked          Boolean                @default(false)
  documents          Document[]
  addresses          Address[]
  bankInformation    BankInformation[]
  blockchainAccounts BlockchainAccount[]
  verificationLevel  VerificationLevel      @default(NotVerified)
  verificationResult VerificationResult?
  termsOfUse         TermsOfUseOnCustomer[]
  payments           Payment[]
  isInvited          Boolean                @default(false)
  isInBrazil         Boolean                @default(true)

  @@index([cuid, lastName, email1, cpfCnpj])
}

enum BankInformationType {
  Pix
  Iban
}

model BankInformation {
  id         Int                 @id @default(autoincrement())
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  customer   Customer            @relation(fields: [customerId], references: [id])
  customerId Int
  type       BankInformationType
  identifier String              @unique // can be pix or iban
  isDefault  Boolean             @default(true)

  @@index([identifier])
}

model TermsOfUseOnCustomer {
  customer     Customer   @relation(fields: [customerId], references: [id])
  customerId   Int
  termsOfUse   TermsOfUse @relation(fields: [termsOfUseId], references: [id])
  termsOfUseId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  accepted     Boolean    @default(false)

  @@id([customerId, termsOfUseId])
}

model TermsOfUse {
  id        Int                    @id @default(autoincrement()) // this also reflects the version
  createdAt DateTime               @default(now())
  url       String
  customer  TermsOfUseOnCustomer[]
}

model BlockchainAccount {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  publicKey  String   @unique
  accountId  String   @unique
  rsAddress  String   @unique

  @@index([publicKey, accountId, rsAddress])
}

enum AddressType {
  Residential
  Work
  Billing
}

model Address {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  Int
  type        AddressType
  line1       String
  line2       String
  line3       String
  line4       String
  city        String
  postCodeZip String
  state       String
  country     String
  isDefault   Boolean     @default(true)
  isActive    Boolean     @default(true)
}

enum DocumentType {
  Selfie
  Id
  DriverLicense
  Passport
  ProofOfAddress
  Other
}

model Document {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  customer   Customer     @relation(fields: [customerId], references: [id])
  customerId Int
  type       DocumentType
  url        String
}

model VerificationResult {
  id                   Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  customer             Customer @relation(fields: [customerId], references: [id])
  customerId           Int      @unique
  updatedAt            DateTime @updatedAt
  validPII             Boolean  @default(false) // all passed documents match (or not)
  isPoliticallyExposed Boolean  @default(false)
  isLegallyRestricted  Boolean  @default(false)
  hasPendingProcesses  Boolean  @default(false)
  credibilityScore     Int?
  anualIncomeBRL       Int?
  hasDebts             Boolean  @default(false)
  isEligible           Boolean  @default(false) // final verdict. Is true then he is verified.
  observations         String?  @db.Text
}

enum PaymentStatus {
  Pending
  Received
  Processed // entire process concluded, i.e. transferred token
  Cancelled // reimbursement
}

model Payment {
  id                  Int           @id @default(autoincrement())
  createdAt           DateTime      @default(now())
  customer            Customer      @relation(fields: [customerId], references: [id])
  customerId          Int
  updatedAt           DateTime      @updatedAt
  accountId           String
  type                String
  amount              Decimal
  usd                 Decimal?
  currency            String?
  poolId              String
  tokenId             String
  tokenQuantity       Int
  transactionId       String? // payment transaction, i.e. pix, or usdc, etc.
  cancelTransactionId String? // reimbursement transaction id
  status              PaymentStatus
  recordId            String? // transaction id on Signum
  processedRecordId   String? // proof of processing
  cancelRecordId      String? // proof of cancellation
  observations        String?       @db.Text

  @@index([accountId, poolId, tokenId])
}

enum EmailTokenStatus {
  Active
  Inactive
}

model EmailVerificationTemp {
  id        Int              @id @default(autoincrement())
  email     String           @unique
  status    EmailTokenStatus @default(Active)
  token     String           @db.Char(6)
  expiredAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}
